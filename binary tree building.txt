/182D
class node
{
    public:
    ll data;
    node*left;
    node*right;
    node(ll d)
    {
        data=d;
        left=NULL;
        right=NULL;
    }
};
node* buildTree(){
    ll d;
    cin>>d;

    if(d==-1){
        return NULL;
    }
    node * root = new node(d);
    root->left = buildTree();
    root->right = buildTree();
    return root;
}
node* treefromarray(ll *a,ll s,ll e)
{
    if(s>e)
    return NULL;
    ll mid=(s+e)/2;
    node*root=new node(a[mid]);
    root->left=treefromarray(a,s,mid-1);
    root->right=treefromarray(a,mid+1,e);
    return root;
}
void printKthLevel(node*root,int k){
    if(root==NULL){
        return;
    }
    if(k==1){
        cout<<root->data<<" ";
        return;
    }
    printKthLevel(root->left,k-1);
    printKthLevel(root->right,k-1);
    return;

}
ll printatdistancek(node* root,node*target,ll k)
{
    if(root==NULL)
    return -1;
    if(root==target)
    {
        printKthLevel(root,k);
        return 0;
    }
    ll dl=printatdistancek(root->left,target,k);
    if(dl!=-1)
    {
        if(dl+1==k)
        cout<<root->data<<" ";
        else
        {
            printKthLevel(root->right,k-2-dl);
        }
        return dl+1;
    }
    ll dr=printatdistancek(root->right,target,k);
    if(dr!=-1)
    {
        if(dr+1==k)
        cout<<root->data<<" ";
        else
        {
            printKthLevel(root->left,k-2-dr);
        }
        return dr+1;
    }
    return -1;
}